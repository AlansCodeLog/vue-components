import{r as w,o as F}from"./vue.esm-bundler-DwcccCfS.js";import{c as h}from"./index-DI2oft4e.js";import"./vExtractRootEl-CIAiCZ2R.js";import"./twMerge-Lr_-a9Kp.js";const M={title:"Other/Focus",args:{outline:!0},parameters:{docs:{description:{component:"For testing the focus styles. The (still WIP) idea is that normally the outlined class is set by whether the user is using the keyboard or not. When true, outlines generated by the focus-outline-* or outlined-* utilities are allowed (they might not always appear since most components have focus-visible styles), when false, they are not allowed, but components can still set custom focus styles that will always appear. Either or is usually not a good idea unless all components set custom focus styles. For something like a web app, focus-visible should be allowed. For an app, this setup allows that to be configurable."}}}},v=`
            <div class="focus-outline-no-offset border border-accent-600" tabindex="0">focus-outline-no-offset (outlined i.e. outlined-focus-visible)</div>
            <div class="focus-outline border border-accent-600" tabindex="0">focus-outline (outlined i.e. outlined-focus-visible)</div>
            <div class="outline-none outlined-focus:border-danger-500 border border-accent-600" tabindex="0">outlined-focus</div>
            <div class="outline-none outlined-within:border-danger-500 border border-accent-600" >
                outlined-within<div tabindex="0">Inner</div>
            </div>
            <div class="outline-none focus:border-danger-500 border border-accent-600" tabindex="0">Has Manual Focus Classes</div>
        `,e={render:t=>({components:h,setup:()=>{const y=w(null);return F(()=>{}),{...t,el:y}},template:v})},s={...e,args:{...e.args,forceOutline:!0}},o={...e,args:{...e.args,outline:!1}},r={render:t=>({components:h,setup:()=>t,template:`
        <div class="outlined-visible group">${v}</div>
        `})};var n,a,i;e.parameters={...e.parameters,docs:{...(n=e.parameters)==null?void 0:n.docs,source:{originalSource:`{
  render: args => ({
    components,
    setup: () => {
      const el = ref<HTMLElement>(null);
      onMounted(() => {
        // el.value.focus()
      });
      return {
        ...args,
        el
      };
    },
    template
  })
}`,...(i=(a=e.parameters)==null?void 0:a.docs)==null?void 0:i.source}}};var l,u,c;s.parameters={...s.parameters,docs:{...(l=s.parameters)==null?void 0:l.docs,source:{originalSource:`{
  ...Primary,
  args: {
    ...Primary.args,
    forceOutline: true
  }
}`,...(c=(u=s.parameters)==null?void 0:u.docs)==null?void 0:c.source}}};var d,p,m;o.parameters={...o.parameters,docs:{...(d=o.parameters)==null?void 0:d.docs,source:{originalSource:`{
  ...Primary,
  args: {
    ...Primary.args,
    outline: false
  }
}`,...(m=(p=o.parameters)==null?void 0:p.docs)==null?void 0:m.source}}};var b,f,g;r.parameters={...r.parameters,docs:{...(b=r.parameters)==null?void 0:b.docs,source:{originalSource:`{
  render: args => ({
    components,
    setup: () => args,
    template: \`
        <div class="outlined-visible group">\${template}</div>
        \`
  })
}`,...(g=(f=r.parameters)==null?void 0:f.docs)==null?void 0:g.source}}};const S=["Primary","OutlineForcedTrue","OutlineFalse","AlwaysAllowFocusVisible"];export{r as AlwaysAllowFocusVisible,o as OutlineFalse,s as OutlineForcedTrue,e as Primary,S as __namedExportsOrder,M as default};
