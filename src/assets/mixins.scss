
@mixin border(
	$width: var(--borderWidth),
	$color: var(--borderNormal),
	$type: solid,
	$side: ""
) {
	@if $side != "" {
		border-#{$side}: $width $type $color;
	} @else {
		border: $width $type $color;
	}
}
@mixin border-invisible( ) {
	@include border(var(--borderWidth), var(--opacity0));
}
@mixin border-radius(
	$amount: var(--borderRadius),
	$side: "all"
) {
	@if $side == "all" {
		border-radius: $amount;
	}
	@if $side == "TL" {
		border-top-left-radius: $amount;
	}
	@if $side == "TR" {
		border-top-right-radius: $amount;
	}
	@if $side == "BL" {
		border-bottom-left-radius: $amount;
	}
	@if $side == "BR" {
		border-bottom-right-radius: $amount;
	}
}
@mixin box-shadow(
	$x: 0,
	$y: var(--shadowWidth),
	$spread: var(--shadowWidth),
	$color: var(--shadowRegular),
	$inset: false
) {
	box-shadow: if($x != 0, calc(#{$x} - 1px), 0) if($y != 0, calc(#{$y} - 1px), 0) $spread $color if($inset, inset, null);
}
@mixin text-shadow(
	$x: 0,
	$y: var(--textShadowWidth),
	$spread: var(--textShadowWidth),
	$color: var(--shadowRegular),
	$inset: false
) {
	text-shadow: if($x != 0, calc(#{$x} - 1px), 0) if($y != 0, calc(#{$y} - 1px), 0) $spread $color if($inset, inset, null);
	:deep(svg) {
		filter: drop-shadow(if($x != 0, calc(#{$x} - 1px), 0) if($y != 0, calc(#{$y} - 1px), 0) $spread $color if($inset, inset, null));
	}
}
@mixin no-text-shadow(
) {
	text-shadow: none;
	:deep(svg) {
		filter: none;
	}
}
@mixin svg-text-shadow(
	$x: 0,
	$y: var(--textShadowWidth),
	$spread: var(--textShadowWidth),
	$color: var(--shadowRegular),
	$inset: false
) {
	filter: drop-shadow(if($x != 0, calc(#{$x} - 1px), 0) if($y != 0, calc(#{$y} - 1px), 0) $spread $color if($inset, inset, null));

}


@mixin flex($grow:null, $shrink:null, $basis: null) {
	@if ($grow) {
		flex-grow: $grow;
	}
	@if ($shrink) {
		flex-shrink: $shrink;
	}
	@if ($basis) {
		flex-basis: $basis;
	}
}

@mixin flex-row($wrap:null, $h:null, $v:null) {
	display:flex;
	@if ($wrap) {
		flex-wrap: $wrap;
	}
	@if ($h) {
		justify-content: $h;
	}
	@if ($v) {
		align-items: $v;
	}
}
@mixin flex-col($wrap:null, $h:null, $v:null) {
	display:flex;
	flex-direction:column;
	@if ($wrap) {
		flex-wrap: $wrap;
	}
	@if ($v) {
		justify-content: $v;
	}
	@if ($h) {
		align-items: $h;
	}
}


@mixin ellipsis () {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

@mixin pos($top:null, $right:null, $bottom: null, $left:null) {
	@if ($top) {
		top: $top;
	}
	@if ($right) {
		right: $right;
	}
	@if ($left) {
		left: $left;
	}
	@if ($bottom) {
		bottom: $bottom;
	}
}

@mixin colors($selector:"", $border:null, $background:null) {
	$colors: ("red":"Red", "blue":"Blue", "green":"Green", "orange":"Orange", "yellow":"Yellow");

	@each $color, $Color in $colors {
		#{$selector}.color-#{$color} {
			@if ($border) {
				// --borderFocused: var(--c#{$Color}5);
				// --borderSoftFocused: var(--c#{$Color}4);
				--borderNormal: var(--c#{$Color}4);
				--borderNormalSoft: var(--c#{$Color}3);
				--borderDark: var(--c#{$Color}8);
				--borderActive: var(--c#{$Color}3);
				--borderHover: var(--c#{$Color}3);
			}
			@if ($background) {
				--bgNormal: var(--c#{$Color}2);
				--textNormal: var(--c#{$Color}9);
				--textHover: var(--c#{$Color}7);
				// --bgFocused: var(--c#{$Color}1);
				// --bgHover: var(--c#{$Color}1);
			}
		}
	}
}

@mixin focusable($selector:"&") {
	#{$selector}:focus, #{$selector}:focus-within {
		border-color: var(--borderFocused);
	}
}


@mixin spacer() {
	.spacer {
		flex: 1 1 auto;
	}
}
