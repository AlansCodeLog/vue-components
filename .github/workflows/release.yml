name: Release

env:
  USE_LOCKFILE: ${{ secrets.USE_LOCKFILE }}
  ENABLE_RELEASE: ${{ secrets.ENABLE_RELEASE }}

on:
  push:
    branches: [ master, alpha, beta ]
  repository_dispatch:
    types: [ release ]

jobs:
  release:
    if: "! contains(toJSON(github.event.commits.*.message), '[skip ci]') && ! contains(toJSON(github.event.commits.*.message), '(no-release)')"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ["lts/*"]

    steps:

    # region Setup
    - uses: actions/checkout@v4

    - uses: pnpm/action-setup@v4
      name: Install pnpm
      id: pnpm-install
      with:
        version: latest

    - uses: actions/setup-node@v4
      name: Setting Up Node.js (${{ matrix.node-version }})
      with:
        node-version: ${{ matrix.node-version }}
        cache: ${{ env.USE_LOCKFILE == 'true' && 'pnpm' || '' }}

    - run: pnpm install --frozen-lockfile
      if: "env.USE_LOCKFILE == 'true'"

    - run: pnpm install --no-lockfile
      if: "env.USE_LOCKFILE != 'true'"
    # regionend

    # region Steps

    - run: pnpm build

    - run: pnpm lint

    # for storybook tests
    - run: pnpx playwright install --with-deps

    - run: pnpm test

    - name: Release
      if: "env.ENABLE_RELEASE == 'true'"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npx semantic-release

    - name: Release Dry Run
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npx semantic-release --dry-run 
      if: "env.ENABLE_RELEASE != 'true'"


    - run: echo "env.ENABLE_RELEASE is ${{ env.ENABLE_RELEASE }}, no release can be published" && exit 1
      if: "env.ENABLE_RELEASE != 'true'"
    # regionend
